#pragma once
#include <initializer_list>

// Класс реализующий растущий динамический массив
//

template <class T> class Array {
public:
	using Iterator = T*;

	Array(size_t = minsize);                 // Конструктор по размеру / по умолчанию
	Array(const Array&);                     // Конструктор глубокого копирования
	Array(const std::initializer_list<T>&);  // Конструктор для uniform-инициализации
	Array(Iterator, Iterator);               // Конструктор через два итератора
	~Array();                                // Деструктор

	Array& operator=(const Array&);     // Оператор глубокого копирования
	T& operator[](size_t);              // Оператор индексации с проверкой допустимости диапазона

	Iterator begin() const;             // Указатель на начало блока памяти массива
	Iterator end() const;               // Указатель на элемент массива, следующий за последним

	size_t   size() const;              // Получить размер рабочей области массива
	size_t   capacity() const;          // Получить размер выделенного в массиве блока памяти
	void     clear();                   // Очищает массив и уменьшает блок памяти до 10 элементов
	void     resize(size_t);            // Изменяет размер динамически выделенного блока памяти

	void     pop_back();                // Удаляет последний элемент массива или, если массив пуст, выбрасывает исключение
	                                    // типа std::logic_error
	void     push_back(T);              // Добавляет элемент в конец массива, при необъходимости увеличивает размер
	void     print(bool = true) const;  // Выводит все элементы массива или сообщение, что массив пуст. Параметр - добавить
			    					    // перенос строки в конец

private:
	static size_t    minsize;           // Минимально выделяемый блок памяти
	static size_t    maxsize;           // Максимально допустимый размер блока памяти
	T*               m_elements;        // Указатель на блок элементов массива
	size_t           m_allocsize;       // Размер выделеного в куче блока памяти
	size_t           m_size;            // Размер рабочей области массива

	void allocate(size_t);              // Первичное выделение памяти массива
	void free();                        // Освобождение памяти массива

};

#include "Array.inl"